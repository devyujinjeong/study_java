-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. 용어 정리
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
>> 프로그램
		실행이 안된 상태

>> 프로세스
		실행중인 프로그램

>> 쓰레드
		프로세스 내의 작업 처리 경로(코드의 실행 흐름)
		1개의 쓰레드는 1개의 코드 실행 흐름
		만약 프로세스 안에 n개의 쓰레드가 있다면 n개의 코드 실행 흐름이 생긴다는 의미이다.

		-	단일 쓰레드
				처리 경로를 한 개만 가지고 있기 때문에 직렬적이다.
				한 번에 하나씩 처리하기 때문에 상대적으로 비효율적이다.
				하지만 하나의 작업에 문제가 발생하더라도 다른 작업은 시작하지 않았기 때문에
				다른 작업에는 문제가 발생하지 않는다.
				따라서 안전성이 보장되고 설계 시 멀티 쓰레드에 비해 쉽다.

		-	멀티 쓰레드
				하나의 프로세스를 동시에 처리하는 것처럼 보이지만 사실은 매우 짧은 단위로 분할해서 차례로 처리한다.
				여러 개의 처리 경로를 가질 수 있도록 하며, 동시 작업이 가능해진다.
				설계하기 어려우며, 하나의 쓰레드 문제 발생 시 모든 쓰레드에 문제가 발생하게 된다.
				멀티 쓰레드로 설계했다면, 처리량 증가, 효율성 증가, 처리비용 감소(보통 메모리 사용량을 의미)의 장점이 있기 때문에
				단점을 감수하고 설계하는 편이다. (예외처리에 만전을 기함)

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. 멀티 쓰레드
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
>> 멀티 쓰레드 구현 방법
		핵심: run() 메소드 재정의

		1. Thread 클래스 상속
		2. Runnable 인터페이스 구현 (작업 스레드가 실행할 수 있는 코드를 가지고 있는 객체)	

>> 동기화(Synchronized)
		자원 공유 시 연산을 건너뛰는 이상한 문제가 생긴다. 
		이는 속도가 빠르기 때문에 이미 처리한 것으로 생각하고 넘어가기 때문이다.
		이런 상황에서는 문제가 생기는 코드 또는 메소드 부분만 단일 처럼 처리할 수 있고,
		이 때 사용하는 문법이 동기화이다.
 
		1. 동기화 블럭 : 소스코드에 부분적으로 동기화 영역을 작성한다.
				synchronized(mutex){
						동기화된 코드;
				}
	
		2. 동기화 키워드 : 메소드 또는 클래스 등에 키워드를 작성하여 전체적인 부분을 동기화해준다.
				접근자 synchronized 리턴타입 메소드명 (매개변수,...){
						동기화된 코드;
				}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. 파일 입출력
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
>> 파일 입출력
		Stream이라는 연결통로를 통해 원본 데이터가 알맞는 인코딩 방식으로 전송된다.
		byte단위로 입출력되기 때문에 개별처리이며, 상세 연산이 필요하지 않다면
		Buffer를 사용한 입출력을 권장한다. Buffer를 사용하면 일괄처리가 가능해진다.

	※ 인코딩 방식
		인코딩 방식은 완성형과 조합형이 있다.
		- 완성형: 각, 간, 갇, 갈, 감, ... , 갛, ...
		- 조합형: ㄱ + ㅏ + ㄱ

		조합형이 효율적이며 byte단위로 데이터를 전송할 때 고정된 byte가 아니기 때문에 가변형 인코딩 방식을 선호한다.
		조합형이면서 가변형인 인코딩 방식은 UTF-8이며, 전 세계에서 가장 많이 사용되는 방식이다.

>> Writer(출력)
		BufferedWriter: 버퍼를 사용한 출력 클래스
		FileWriter: 전달한 경로의 파일을 출력하기 위한 목적으로 열어준다.
			    전달한 경로에 파일이 없다면 새롭게 만든 후 열어준다.


>> Reader(입력)
		BufferedReader: 버퍼를 사용한 입력 클래스
		FileReader: 전달한 경로의 파일을 입력하기 위한 목적으로 열어준다.
			    전달한 경로에 파일이 없다면 FileNotFoundException이 발생한다.

>> File(파일 정보)
		전달한 경로에 있는 파일의 정보를 담는 타입
		디렉터리 생성, 해당 경로의 전체 파일 목록, 파일 삭제 등
  
