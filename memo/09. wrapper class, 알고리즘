==============================================================================================================
1. Wrapper Class
==============================================================================================================
		클래스타입 객체 = new 클래스타입(일반타입의 값); //boxing, deprecated
		클래스타입 객체 = 클래스타입.valueOf(일반타입의 값); //boxing
		일반타입 변수 = 객체.000Value(); //unboxing

==============================================================================================================
2. 알고리즘
==============================================================================================================
>> 알고리즘
		어떤 문제가 발생되었을 때 해결할 수 있는 절차 혹은 순서

>> 자료구조(저장소)
		의미 없는 데이터를 하나의 정보로 만들어주는 알고리즘들의 집합
		수집한 자료를 저장하는 방법

>> 컬렉션 프레임워크(Collection Framework) 
		많은 데이터를 쉽고 효과적으로 관리할 수 있는 표준화된 방법을 제공하는 클래스들의 집합
		
		// 인터페이스끼리도 상속 가능 (extends라고 썼다고 클래스라고 생각하면 안됨)
		1) List extends Collection 	
		 - Vector: 용량 관리, 보안성 강화, 처리량 감소
		 - LinkedList: FILO로 인해 넣을 때는 빨라도 원하는 위치의 데이터를 가져오는 것이 상대적으로 느리다.
		 - ArrayList:	인덱스로 데이터를 관리한다. 배열의 특징인 인덱스를 이용하여 값을 저장하고 관리한다.★

		 ※ 배열과 ArrayList의 차이
				배열은 길이에 제한을 두어야 할 때 자주 사용되고,
				ArrayList는 몇 개의 데이터가 들어올지 알 수 없을 때 사용한다. 

		2) Set extends Collection
		 - HashSet
				중복되는 값을 무시하는 자료구조이다.
				저장된 값들은 인덱스가 없기 때문에 순서가 없다.
				해시 코드로 유무 검사가 진행되기 때문에 속도가 상대적으로 좋다.

				※ 	hashCode()로 검사하는 자료구조일 경우 반드시 비교할 필드로 재정의해야 한다.
					다른 객체일지라도 같은 필드의 값을 가지고 있다면 같은 객체로 인식하며,
					이 때, hashCode()의 리턴값을 비교할 필드값으로 리턴하여 사용한다.
					equals()와 hashCode()는 항상 같이 재정의 해야 데이터 불일치 문제를 해결할 수 있다.

		3) Map --> Mapping 검색으로 생각
		 - HashMap(서버 간 데이터 교환)
				Key와 Value 한 쌍으로 저장되며, 검색의 목적을 가지고 있다.
				Key에 중복된 값을 넣으면 Value가 최근 값으로 수정되고,
				중복되지 않은 값을 넣으면 새롭게 추가된다. Value는 중복이 가능하다. 
